---
// Enhanced Meta component with comprehensive schema support
import { getImage } from "astro:assets";
import { OG, SEO, SITE } from "../data_files/constants";
import faviconSvgSrc from "../images/blue-skies-icon.svg";
import faviconSrc from "../images/blue-skies-icon.png";
import {
  localBusinessSchema,
  websiteSchema,
  articleSchema,
  courseSchema,
  faqSchema,
  breadcrumbSchema,
} from "../data_files/structured-data";

// Props interface with enhanced schema options
interface Props {
  title?: string;
  meta?: string;
  structuredData?: object | object[];
  customDescription?: string | null;
  customOgTitle?: string | null;
  breadcrumbs?: Array<{ name: string; url: string }>;
  pageType?:
    | "homepage"
    | "course"
    | "article"
    | "faq"
    | "service"
    | "about"
    | "contact";
  courseData?: any;
  articleData?: any;
  faqData?: any;
  includeLocalBusiness?: boolean;
  includeWebsite?: boolean;
}

// Default properties
const defaultProps = {
  meta: SITE.description,
  structuredData: SEO.structuredData,
  customDescription: null,
  customOgTitle: null,
  breadcrumbs: null,
  pageType: "homepage" as const,
  includeLocalBusiness: false,
  includeWebsite: false,
};

// Extract props with defaults
const {
  title = SITE.title,
  meta = defaultProps.meta,
  structuredData = defaultProps.structuredData,
  customDescription = defaultProps.customDescription,
  customOgTitle = defaultProps.customOgTitle,
  breadcrumbs = defaultProps.breadcrumbs,
  pageType = defaultProps.pageType,
  courseData,
  articleData,
  faqData,
  includeLocalBusiness = defaultProps.includeLocalBusiness,
  includeWebsite = defaultProps.includeWebsite,
} = Astro.props as Props;

// Use custom description if provided, otherwise use default meta
const description = customDescription || meta;
const ogTitle = customOgTitle || OG.title;
const ogDescription = customDescription || OG.description;

// Define the metadata for your website and individual pages
const URL = `${Astro.site}`;
const author = SITE.author;
const canonical = Astro.url.href;

// Generate social image
const socialImageRes = await getImage({
  src: OG.image,
  width: 1200,
  height: 600,
});
const socialImage = Astro.url.origin + socialImageRes.src;

// Generate favicon images
const faviconSvg = await getImage({
  src: faviconSvgSrc,
  format: "svg",
});

const appleTouchIcon = await getImage({
  src: faviconSrc,
  width: 180,
  height: 180,
  format: "png",
});

// Generate comprehensive structured data
const allStructuredData: any[] = [];

// Add custom structured data if provided
if (structuredData) {
  if (Array.isArray(structuredData)) {
    allStructuredData.push(...structuredData);
  } else {
    allStructuredData.push(structuredData);
  }
}

// Add website schema for homepage or if explicitly requested
if (pageType === "homepage" || includeWebsite) {
  allStructuredData.push(websiteSchema);
}

// Add local business schema for homepage or if explicitly requested
if (pageType === "homepage" || includeLocalBusiness) {
  allStructuredData.push(localBusinessSchema);
}

// Add breadcrumb schema if breadcrumbs are provided
if (breadcrumbs && breadcrumbs.length > 1) {
  allStructuredData.push(breadcrumbSchema(breadcrumbs));
}

// Add page-specific schemas
switch (pageType) {
  case "course":
    if (courseData) {
      allStructuredData.push(courseSchema(courseData));
    }
    break;
  case "article":
    if (articleData) {
      allStructuredData.push(articleSchema(articleData));
    }
    break;
  case "faq":
    if (faqData && faqData.faqs) {
      allStructuredData.push(faqSchema(faqData.faqs));
    }
    break;
}

// Create alternate language links (for future i18n support)
const languages: { [key: string]: string } = {
  en: "",
  // fr: "fr", // Uncomment when French is added
};

function createHref(lang: string, prefix: string, path: string): string {
  const cleanPath = path.replace(/^\/(fr|en)\//, "/");
  const basePath = prefix ? `/${prefix}${cleanPath}` : cleanPath;
  const normalizedBasePath = basePath.replace(/\/\/+/g, "/");
  return `${URL.slice(0, -1)}${normalizedBasePath}`;
}

const fullPath: string = Astro.url.pathname;

const alternateLanguageLinks: string = Object.entries(languages)
  .map(([lang, prefix]: [string, string]) => {
    const cleanPath = fullPath.replace(/^\/(fr|en)\//, "/");
    const href: string = createHref(lang, prefix, cleanPath);
    return `<link rel="alternate" hreflang="${lang}" href="${href}" />`;
  })
  .join("\n");
---

{/* Inject all structured data */}
{
  allStructuredData.map((schema) => (
    <script type="application/ld+json" set:html={JSON.stringify(schema)} />
  ))
}

{/* Standard meta tags */}
<meta charset="utf-8" />
<meta content={description} name="description" />
<meta name="web_author" content={author} />
<meta
  name="viewport"
  content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0"
/>
<meta http-equiv="X-UA-Compatible" content="ie=edge" />
<link rel="canonical" href={canonical} />
<Fragment set:html={alternateLanguageLinks} />

{/* Enhanced SEO meta tags */}
<meta
  name="robots"
  content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1"
/>
<meta name="googlebot" content="index, follow" />
<meta name="bingbot" content="index, follow" />

{/* Facebook/Open Graph Meta Tags */}
<meta property="og:locale" content="en_US" />
<meta property="og:url" content={canonical} />
<meta property="og:type" content="website" />
<meta property="og:title" content={ogTitle} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:description" content={ogDescription} />
<meta property="og:image" content={socialImage} />
<meta content="1200" property="og:image:width" />
<meta content="600" property="og:image:height" />
<meta content="image/png" property="og:image:type" />
<meta property="og:image:alt" content={`${SITE.title} - ${description}`} />

{/* Twitter Meta Tags */}
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@flybsa" />
<meta name="twitter:creator" content="@flybsa" />
<meta property="twitter:domain" content="flytheblueskies.com" />
<meta property="twitter:url" content={canonical} />
<meta name="twitter:title" content={ogTitle} />
<meta name="twitter:description" content={ogDescription} />
<meta name="twitter:image" content={socialImage} />
<meta name="twitter:image:alt" content={`${SITE.title} - ${description}`} />

{/* Additional SEO enhancements */}
<meta name="format-detection" content="telephone=yes" />
<meta name="HandheldFriendly" content="true" />
<meta name="MobileOptimized" content="width" />

{/* Links to webmanifest and sitemap */}
<link rel="manifest" href="/manifest.json" />
<link rel="sitemap" href="/sitemap-index.xml" />

{/* Enhanced favicon implementation */}
<link href="/favicon.ico" rel="icon" sizes="any" type="image/x-icon" />
<link href={faviconSvg.src} rel="icon" type="image/svg+xml" sizes="any" />
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="default" />
<meta name="apple-mobile-web-app-title" content="Blue Skies Above" />
<link href={appleTouchIcon.src} rel="apple-touch-icon" />
<link href={appleTouchIcon.src} rel="shortcut icon" />

{/* Theme colors for different browsers */}
<meta name="theme-color" content="#facc15" />
<meta name="msapplication-TileColor" content="#facc15" />
<meta name="msapplication-navbutton-color" content="#facc15" />

{/* Preconnect to external domains for performance */}
<link rel="preconnect" href="https://www.googletagmanager.com" />
<link rel="preconnect" href="https://www.google-analytics.com" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="dns-prefetch" href="https://www.googletagmanager.com" />
<link rel="dns-prefetch" href="https://www.google-analytics.com" />
