---
// Import necessary components and utilities
import MainLayoutEnhanced from "@/layouts/MainLayoutEnhanced.astro";
import AvatarBlogLarge from "@components/ui/avatars/AvatarBlogLarge.astro";
import CardRelated from "@components/ui/cards/CardRelated.astro";
import Bookmark from "@components/ui/buttons/Bookmark.astro";
import SocialShare from "@components/ui/buttons/SocialShare.astro";
import PostFeedback from "@components/ui/feedback/PostFeedback.astro";
import { Image } from "astro:assets";
import { capitalize, formatDate } from "@utils/utils";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { SITE } from "@data/constants";
import CTA from "@/components/sections/misc/CTA.astro";

import ctaImg from "../../assets/images/blue-skies-cessna-in-clouds.webp";
// Update getStaticPaths for English posts
export async function getStaticPaths() {
  const blogPosts = await getCollection("blog", ({ id }) =>
    id.startsWith("en/")
  );
  return blogPosts.map((post) => {
    const idWithoutLang = post.id.replace(/^en\//, ""); // Remove the "en/" prefix
    return {
      params: { id: idWithoutLang },
      props: { post },
    };
  });
}

// Get the current post's data
const { post } = Astro.props;

const blogPosts: CollectionEntry<"blog">[] = await getCollection(
  "blog",
  ({ id }) => id.startsWith("en/")
);

// Filter out the current post to get related posts
// Note: This is a very basic way of choosing related posts, just for the purpose of the example.
// In a production site, you might want to implement a more robust algorithm, choosing related posts based on tags, categories, dates, authors, or keywords.
// See example: https://blog.codybrunner.com/2024/adding-related-articles-with-astro-content-collections/
const relatedPosts: CollectionEntry<"blog">[] = blogPosts.filter(
  (blogEntry) => blogEntry.id !== post.id
);

const pageTitle: string = `${post.data.title} | ${SITE.title}`;
// For the meta description, use the first paragraph of content if available
const metaDescription =
  post.data.contents[0]?.paragraph ||
  `Read ${post.data.title} on Blue Skies Above's blog`;
const ogTitle = `${post.data.title} | Blog | ${SITE.title}`;

// Article schema data
const articleData = {
  headline: post.data.title,
  author: post.data.author || "Blue Skies Above",
  datePublished: post.data.pubDate.toISOString(),
  dateModified: post.data.pubDate.toISOString(),
  image: post.data.cardImage?.src,
  wordCount:
    post.data.contents?.reduce(
      (acc, content) => acc + (content.paragraph?.length || 0),
      0
    ) || 1000,
  description: metaDescription,
  url: `https://flytheblueskies.com/blog/${post.id.replace(/^en\//, "")}`,
};

// Breadcrumbs for blog post
const breadcrumbs = [
  { name: "Home", url: "/" },
  { name: "Blog", url: "/blog" },
  { name: post.data.title, url: `/blog/${post.id.replace(/^en\//, "")}` },
];

const ctaDiscovery = {
  isRightSection: true,
  title: "Ready to Take the Controls?",
  subTitle:
    "Book a Discovery Flight and experience the thrill of flying firsthand. You'll take the controls with an expert instructor and see the world from a whole new perspective.",
  single: true,
  imgOne: ctaImg,
  imgOneAlt: "Flight training syllabus materials",
  imgTwo: ctaImg,
  imgTwoAlt: "Instructor with student at planning table",
  btnExists: true,
  btnTitle: "Book Now",
  btnURL: "/discovery-flights",
};
---

<MainLayoutEnhanced
  title={pageTitle}
  customDescription={metaDescription}
  customOgTitle={ogTitle}
  pageType="article"
  articleData={articleData}
  breadcrumbs={breadcrumbs}
  lang="en"
>
  <section class="mx-auto max-w-3xl px-4 pt-6 pb-12 sm:px-6 lg:px-8 lg:pt-10">
    <div class="max-w-2xl">
      <div class="mb-6 flex items-center justify-between">
        <div class="flex w-full gap-x-5 sm:items-center sm:gap-x-3">
          <AvatarBlogLarge blogEntry={post} />
          <div class="grow">
            <div class="flex items-center justify-between gap-x-2">
              <div>
                {/* Post metadata and author info */}
                <span class="font-bold text-neutral-700 dark:text-neutral-300">
                  {post.data.author}
                </span>
                <ul class="text-xs text-neutral-500">
                  <li
                    class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600"
                  >
                    {formatDate(post.data.pubDate)}
                  </li>
                  <li
                    class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-neutral-300 last:pe-0 last-of-type:before:hidden dark:text-neutral-400 dark:before:bg-neutral-600"
                  >
                    {post.data.readTime} min read
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Blog post title */}
      <h2
        class="mb-3 text-2xl font-bold text-neutral-800 md:text-3xl dark:text-neutral-200"
      >
        {post.data.title}
      </h2>
      {/* Blog post contents */}
      <div class="mb-5 space-y-5 md:mb-8 md:space-y-8">
        {
          post.data.contents.map(
            (
              content: {
                title?: string;
                paragraph: string;
              },
              index: number
            ) => (
              <>
                <div>
                  {content.title && (
                    <h3 class="mb-4 text-2xl font-bold text-neutral-800 dark:text-neutral-200">
                      {content.title}
                    </h3>
                  )}
                  <p class="text-lg text-pretty text-neutral-700 dark:text-neutral-300">
                    {content.paragraph}
                  </p>
                </div>
                {index === 1 && (
                  <Image
                    class="w-full rounded-xl object-cover"
                    src={post.data.cardImage}
                    alt={post.data.cardImageAlt}
                    draggable={"false"}
                    format={"avif"}
                  />
                )}
              </>
            )
          )
        }
      </div>
      <div
        class="mx-auto grid max-w-(--breakpoint-lg) gap-y-5 sm:flex sm:items-center sm:justify-between sm:gap-y-0"
      >
        {/* Blog post tags */}
        <div
          class="flex flex-wrap gap-x-2 gap-y-1 sm:flex-nowrap sm:items-center sm:gap-y-0"
        >
          {
            post.data.tags?.map((tag: string) => (
              <span class="inline-flex items-center gap-x-1.5 rounded-lg bg-neutral-400/30 px-3 py-1.5 text-xs font-medium text-neutral-700 outline-hidden focus:outline-hidden focus-visible:ring-3 focus-visible:outline-hidden dark:bg-neutral-700/60 dark:text-neutral-300">
                {capitalize(tag)}
              </span>
            ))
          }
        </div>
        {/* Bookmark and Share buttons */}
        <div class="flex items-center justify-end gap-x-1.5">
          <Bookmark />
          <div
            class="mx-3 block h-4 border-e border-neutral-400 dark:border-neutral-500"
          >
          </div>
          <div class="inline-flex">
            <SocialShare pageTitle={post.data.title} />
          </div>
        </div>
      </div>
    </div>
    <!-- <PostFeedback
      title="Was this post helpful?"
      firstChoice="Yes"
      secondChoice="No"
    /> -->
  </section>

  {/* Related articles section */}
  <section class="mx-auto max-w-3xl px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
    <div class="mb-10 max-w-2xl">
      <h2
        class="text-2xl font-bold text-balance text-neutral-800 md:text-4xl md:leading-tight dark:text-neutral-200"
      >
        Related articles
      </h2>
    </div>

    <div class="grid grid-cols-2 gap-6">
      {
        relatedPosts
          .sort(() => 0.5 - Math.random())
          .slice(0, 2)
          .map((entry) => <CardRelated blogEntry={entry} />)
      }
    </div>
  </section>

  <CTA content={ctaDiscovery} />
</MainLayoutEnhanced>
